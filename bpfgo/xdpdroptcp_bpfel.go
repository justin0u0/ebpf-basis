// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package bpfgo

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdpDropTcp returns the embedded CollectionSpec for xdpDropTcp.
func loadXdpDropTcp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpDropTcpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpDropTcp: %w", err)
	}

	return spec, err
}

// loadXdpDropTcpObjects loads xdpDropTcp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpDropTcpObjects
//	*xdpDropTcpPrograms
//	*xdpDropTcpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpDropTcpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpDropTcp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpDropTcpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpDropTcpSpecs struct {
	xdpDropTcpProgramSpecs
	xdpDropTcpMapSpecs
}

// xdpDropTcpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpDropTcpProgramSpecs struct {
	XdpDropTcp *ebpf.ProgramSpec `ebpf:"xdp_drop_tcp"`
}

// xdpDropTcpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpDropTcpMapSpecs struct {
}

// xdpDropTcpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpDropTcpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpDropTcpObjects struct {
	xdpDropTcpPrograms
	xdpDropTcpMaps
}

func (o *xdpDropTcpObjects) Close() error {
	return _XdpDropTcpClose(
		&o.xdpDropTcpPrograms,
		&o.xdpDropTcpMaps,
	)
}

// xdpDropTcpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpDropTcpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpDropTcpMaps struct {
}

func (m *xdpDropTcpMaps) Close() error {
	return _XdpDropTcpClose()
}

// xdpDropTcpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpDropTcpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpDropTcpPrograms struct {
	XdpDropTcp *ebpf.Program `ebpf:"xdp_drop_tcp"`
}

func (p *xdpDropTcpPrograms) Close() error {
	return _XdpDropTcpClose(
		p.XdpDropTcp,
	)
}

func _XdpDropTcpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpdroptcp_bpfel.o
var _XdpDropTcpBytes []byte
