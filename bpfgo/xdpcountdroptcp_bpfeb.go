// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpfgo

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdpCountDropTcp returns the embedded CollectionSpec for xdpCountDropTcp.
func loadXdpCountDropTcp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpCountDropTcpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpCountDropTcp: %w", err)
	}

	return spec, err
}

// loadXdpCountDropTcpObjects loads xdpCountDropTcp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpCountDropTcpObjects
//	*xdpCountDropTcpPrograms
//	*xdpCountDropTcpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpCountDropTcpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpCountDropTcp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpCountDropTcpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpCountDropTcpSpecs struct {
	xdpCountDropTcpProgramSpecs
	xdpCountDropTcpMapSpecs
}

// xdpCountDropTcpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpCountDropTcpProgramSpecs struct {
	XdpCountDropTcp *ebpf.ProgramSpec `ebpf:"xdp_count_drop_tcp"`
}

// xdpCountDropTcpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpCountDropTcpMapSpecs struct {
	DropPacketsCountMap *ebpf.MapSpec `ebpf:"drop_packets_count_map"`
}

// xdpCountDropTcpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpCountDropTcpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpCountDropTcpObjects struct {
	xdpCountDropTcpPrograms
	xdpCountDropTcpMaps
}

func (o *xdpCountDropTcpObjects) Close() error {
	return _XdpCountDropTcpClose(
		&o.xdpCountDropTcpPrograms,
		&o.xdpCountDropTcpMaps,
	)
}

// xdpCountDropTcpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpCountDropTcpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpCountDropTcpMaps struct {
	DropPacketsCountMap *ebpf.Map `ebpf:"drop_packets_count_map"`
}

func (m *xdpCountDropTcpMaps) Close() error {
	return _XdpCountDropTcpClose(
		m.DropPacketsCountMap,
	)
}

// xdpCountDropTcpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpCountDropTcpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpCountDropTcpPrograms struct {
	XdpCountDropTcp *ebpf.Program `ebpf:"xdp_count_drop_tcp"`
}

func (p *xdpCountDropTcpPrograms) Close() error {
	return _XdpCountDropTcpClose(
		p.XdpCountDropTcp,
	)
}

func _XdpCountDropTcpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdpcountdroptcp_bpfeb.o
var _XdpCountDropTcpBytes []byte
